@startuml

title: unaMotoAtraviesaCiudadYSeEncuentraConUnPozoYEsPenalizadaTresMovimientos


Actor test
test -> ":Juego" : moverJugadorEnDireccion("Este")
":Juego" -> ":Jugador"  : moverEnDireccion("Este")
":Jugador"  -> ":Moto" : moverseAEsquina(this, "Este")
":Moto"  -> "esquinaActual: Esquina" : moverVehiculo(jugador, "Este")
"esquinaActual: Esquina" -> cuadras : get("Este")
"esquinaActual: Esquina" <-- cuadras : cuadraAdirijirse = Cuadra
"esquinaActual: Esquina" -> ":Jugador"  : incrementarMovimientos(1)
"esquinaActual: Esquina" -> "cuadraAdirijirse:Cuadra" : moverVehiculo(jugador, this)
"cuadraAdirijirse:Cuadra" -> ":Pozo" : afectarJugador(jugador)
":Pozo" -> ":Jugador"  : getVehiculo
":Pozo" <-- ":Jugador"  : vehiculo = Moto
":Pozo" -> ":Moto"  : chocarContraPozo(jugador)
":Moto"  -> ":Jugador"  : incrementarMovimientos(3)
":Pozo" <-- ":Moto"  : puedeAvanzar = true
"cuadraAdirijirse:Cuadra" <-- ":Pozo" : puedeAvanzar = true
"cuadraAdirijirse:Cuadra" <- "cuadraAdirijirse:Cuadra" : obtenerEsquinaOpuesta(esquinaInicio)
"cuadraAdirijirse:Cuadra" -> ":Jugador"  : getVehiculo
"cuadraAdirijirse:Cuadra" <-- ":Jugador"  : vehiculo = Moto
"cuadraAdirijirse:Cuadra" -> ":Moto"  : setEsquinaActual(esquinaDestino)
test <-- "cuadraAdirijirse:Cuadra"

@enduml