@startuml
title: una4x4AtraviesaCiudadYSeEncuentraConUnPozoYNoEsPenalizada
Actor test
test -> ":Juego" : moverJugadorEnDireccion("Sur")
":Juego" -> ":Jugador" : moverEnDireccion("Sur")
":Jugador" -> ":CuatroPorCuatro" : moverseAEsquina(this, "Sur")
":CuatroPorCuatro" -> "esquinaActual: Esquina" : moverVehiculo(jugador, "Sur")
"esquinaActual: Esquina" -> cuadras : get("Sur")
"esquinaActual: Esquina" <-- cuadras : "cuadraAdirijirse:Cuadra" = Cuadra
"esquinaActual: Esquina" -> ":Jugador" : incrementarMovimientos(1)
"esquinaActual: Esquina" -> "cuadraAdirijirse:Cuadra" : moverVehiculo(jugador, this)
"cuadraAdirijirse:Cuadra" -> ":Pozo"  : afectarJugador(jugador)
":Pozo"  -> ":Jugador" : getVehiculo
":Pozo"  <-- ":Jugador" : vehiculo = CuatroPorCuatro
":Pozo"  -> ":CuatroPorCuatro" : chocarContraPozo(jugador)
":CuatroPorCuatro" -> ":CuatroPorCuatro" : pozosAtravezados++
":Pozo"  <-- ":CuatroPorCuatro" : puedeAvanzar = true
"cuadraAdirijirse:Cuadra" <-- ":Pozo"  : puedeAvanzar = true
"cuadraAdirijirse:Cuadra" <- "cuadraAdirijirse:Cuadra" : obtenerEsquinaOpuesta(esquinaInicio)
"cuadraAdirijirse:Cuadra" -> ":Jugador" : getVehiculo
"cuadraAdirijirse:Cuadra" <-- ":Jugador" : vehiculo = CuatroPorCuatro
"cuadraAdirijirse:Cuadra" -> ":CuatroPorCuatro" : setEsquinaActual(esquinaDestino)
test <-- "cuadraAdirijirse:Cuadra"
@enduml