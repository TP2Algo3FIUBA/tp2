@startuml

    abstract class EstadoVehiculo {
        + {abstract} aplicarSorpresaCambioVehiculo() : EstadoVehiculo
        + {abstract} chocarContraPozo(jugador: Jugador)
        + {abstract} chocarContraPiquete(jugador: Jugador, esquinaInicio: Esquina, esquinaDestino: Esquina) : Esquina
        + {abstract} atravezarControlPolicial(jugador: Jugador)
    }

    class EstadoAuto {
        + aplicarSorpresaCambioVehiculo() : EstadoVehiculo
        + chocarContraPozo(jugador: Jugador)
        + chocarContraPiquete(jugador: Jugador, esquinaInicio: Esquina, esquinaDestino: Esquina) : Esquina
        + atravezarControlPolicial(jugador: Jugador)
    }

    class EstadoMoto {
        + aplicarSorpresaCambioVehiculo() : EstadoVehiculo
        + chocarContraPozo(jugador: Jugador)
        + chocarContraPiquete(jugador: Jugador, esquinaInicio: Esquina, esquinaDestino: Esquina) : Esquina
        + atravezarControlPolicial(jugador: Jugador)
    }

    class EstadoCuatroPorCuatro {
        + aplicarSorpresaCambioVehiculo() : EstadoVehiculo
        + chocarContraPozo(jugador: Jugador)
        + chocarContraPiquete(jugador: Jugador, esquinaInicio: Esquina, esquinaDestino: Esquina) : Esquina
        + atravezarControlPolicial(jugador: Jugador)
    }

    class Vehiculo {
        - esquinaActual : Esquina
        + setEsquinaActual(esquinaActual: Esquina)
        + moverseAEsquina(jugador: Jugador, direccion: Direccion)
        + getEsquinaActual() : Esquina
        + chocarContraPozo(jugador: Jugador)
        + chocarContraPiquete(jugador: Jugador, esquina: InicioEsquina, esquinaDestino: Esquina)
        + aplicarSorpresaCambioVehiculo()
        + chocharControlPolicial(jugador: Jugador)
        + getEstadoVehiculo() : EstadoVehiculo
    }

   Vehiculo --> EstadoVehiculo : tiene un
   EstadoVehiculo <|-- EstadoAuto
   EstadoVehiculo <|-- EstadoMoto
   EstadoVehiculo <|-- EstadoCuatroPorCuatro

@enduml